shiny::runApp('C:/Users/someg/dev/gather/CUA5---Sanitation-Analysis/Shiny')
getwd()
getwd()
library(shiny)
library(dplyr)
library(leaflet)
library(ggplot2)
library(rgdal)
library(raster)
library(plotly)
library(lubridate)
library(scales)
library(shinyWidgets)
library(shinythemes)
library(shinyjs)
library(viridis)
library(shinycssloaders)
library(sf)
source('server_modules.R')
source('functions.R')
#set the working directory
setwd("C:/Users/someg/dev/gather/git/Sanitation_Risk_App/Shiny/Sanitaion_Risk_App/Sanitation_Risk_App/Shiny/")
#open the cua5 outline shapefile
CUA5 <- readOGR("Shapefiles/CUA5.shp",GDAL1_integer64_policy = TRUE, layer = 'CUA5')
CUA5 <- spTransform(CUA5, CRS("+proj=longlat +datum=WGS84 +no_defs"))
#open the fokontanies dataset
fok <- readOGR("Shapefiles/fokontanies_max.shp", GDAL1_integer64_policy = TRUE, layer = 'fokontanies_max')
fok <- spTransform(fok, CRS("+proj=longlat +datum=WGS84 +no_defs"))
# CUA5 Risk
CUA5_Risk <- readOGR("Shapefiles/Final_SRI_1.shp",GDAL1_integer64_policy = TRUE, layer = "Final_SRI_1")
CUA5_Risk<- spTransform(CUA5_Risk, CRS("+proj=longlat +datum=WGS84 +no_defs"))
#Adding roads
roads <- readOGR("Shapefiles/roads.shp", GDAL1_integer64_policy = TRUE, layer = 'roads')
roads <- spTransform(roads, CRS("+proj=longlat +datum=WGS84 +no_defs"))
#changing the SRI to 2 decimal places!
fok@data[,'SRI1_max']=round(fok@data[,'SRI1_max'],2)
fok@data[,'SRI2_max']=round(fok@data[,'SRI2_max'],2)
fok@data[,'SRI3_max']=round(fok@data[,'SRI3_max'],2)
#use this to check what data is available
#CUA5_Risk@data$
# Server ----
server <- function(input, output, session) {
# Bounding box filter (If the stats are being used)
boundingBox <- reactive({
if(!is.null(input$toilets_bounds)){
Map <- in_bounding_box(df, df$latitude, df$longitude, input$toilets_bounds)
} else {
Map
}
})
#create the symbology bins
pallete <- c("#008837", "#a6dba0", "#f7f7f7", "#c2a5cf", "#7b3294")
bins_sri1 <- c(0, 0.419, 0.525, 0.621, 0.744, 1)
pal_sri1 <- colorBin(pallete, domain = fok@data$SRI1_max, bins = bins_sri1)
bins_sri2 <- c(0, 0.7, 0.797, 0.836, 0.928, 1)
pal_sri2 <- colorBin(pallete, domain = fok@data$SRI2_max, bins = bins_sri2)
bins_sri3 <- c(0, 0.682, 0.75, 0.79, 0.909, 1)
pal_sri3 <- colorBin(pallete, domain = fok@data$SRI3_max, bins = bins_sri3)
#Labels for the symbology
sym_labels<- c("Lowest"," ","Medium"," ", "Highest")
popup_sri1 <- paste(
"<strong>Name: </strong>"
, fok$Nom
, "<br><strong>Max Risk: </strong>"
, fok$SRI1_max)
popup_sri2 <- paste(
"<strong>Name: </strong>"
, fok$Nom
, "<br><strong>Max Risk: </strong>"
, fok$SRI2_max)
popup_sri3 <- paste(
"<strong>Name: </strong>"
, fok$Nom
, "<br><strong>Max Risk: </strong>"
, fok$SRI3_max)
#the data input for SRI1 tab
output$SRI1 <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Street Map") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite Map") %>%
# addPolylines(data = CUA5, color = "Black", weight = 3, smoothFactor = 0.5,
#              opacity = 1.0, fillOpacity = 1, dashArray ="4 6 2",
#              fillColor = "Blue") %>%
addPolylines(data = roads, color = "Black", weight = 1, smoothFactor = 0.5,
opacity = 1, fillOpacity = 0.3,
group = "Roads") %>%
addPolygons(data = fok, fillColor = ~pal_sri1(SRI1_max), weight = 1, smoothFactor = 0.5, #color = "#444444",
opacity = 0.2, fillOpacity = 0.7, popup = ~popup_sri1,
#label = HTML_labels(fok$SRI1_max, text = ""),
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
opacity = 0.7,
bringToFront = TRUE),
group = "Fokontany (Max Risk)") %>%
addPolygons(data = CUA5_Risk, fillColor = ~pal_sri1(SRI1_), color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 0.1, fillOpacity = 0.6,
label = HTML_labels(CUA5_Risk$SRI1_, text = ""),
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
opacity = 0.7,
bringToFront = TRUE),
group = "Grid") %>%
addLegend(title = "Risk",
position = "bottomleft",
values = CUA5_Risk$SRI1_,
pal = pal_sri1,
bins = 5,
labFormat = function(type, cuts, p){  # Here's the trick
paste0(sym_labels)}
) %>%
addLayersControl(
baseGroups = c("Street Map", "Satellite Map"),
overlayGroups = c("Fokontany (Max Risk)", "Grid", "Roads"),
position = 'bottomleft',
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("Grid") %>%
hideGroup("Roads")
})
output$SRI2 <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Street Map") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite Map") %>%
# addPolylines(data = CUA5, color = "Black", weight = 3, smoothFactor = 0.5,
#              opacity = 1.0, fillOpacity = 1, dashArray ="4 6 2",
#              fillColor = "Blue") %>%
addPolylines(data = roads, color = "Black", weight = 1, smoothFactor = 0.5,
opacity = 1, fillOpacity = 0.3,
group = "Roads") %>%
addPolygons(data = fok, fillColor = ~pal_sri2(SRI2_max), weight = 1, smoothFactor = 0.5, #color = "#444444",
opacity = 0.2, fillOpacity = 0.7, popup = ~popup_sri2,
#label = HTML_labels(fok$SRI2_max, text = ""),
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
opacity = 0.7,
bringToFront = TRUE),
group = "Fokontany (Max Risk)") %>%
addPolygons(data = CUA5_Risk, fillColor = ~pal_sri2(SRI2_), color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 0.1, fillOpacity = 0.6,
label = HTML_labels(CUA5_Risk$SRI2_, text = ""),
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
opacity = 0.7,
bringToFront = TRUE),
group = "Grid") %>%
addLegend(title = "Risk",
position = "bottomleft",
values = CUA5_Risk@data$SRI2_,
pal = pal_sri2,
bins = 5,
labFormat = function(type, cuts, p){  # Here's the trick
paste0(sym_labels)}
) %>%
addLayersControl(
baseGroups = c("Street Map", "Satellite Map"),
overlayGroups = c("Fokontany (Max Risk)", "Grid", "Roads"),
position = 'bottomleft',
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("Grid") %>%
hideGroup("Roads")
})
output$SRI3 <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Street Map") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite Map") %>%
# addPolylines(data = CUA5, color = "Black", weight = 3, smoothFactor = 0.5,
#              opacity = 1.0, fillOpacity = 1, dashArray ="4 6 2",
#              fillColor = "Blue") %>%
addPolylines(data = roads, color = "Black", weight = 1, smoothFactor = 0.5,
opacity = 1, fillOpacity = 0.3,
group = "Roads") %>%
addPolygons(data = fok, fillColor = ~pal_sri3(SRI3_max), weight = 1, smoothFactor = 0.5, #color = "#444444",
opacity = 0.2, fillOpacity = 0.7, popup = ~popup_sri3,
#label = HTML_labels(fok$SRI2_max, text = ""),
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
opacity = 0.7,
bringToFront = TRUE),
group = "Fokontany (Max Risk)") %>%
addPolygons(data = CUA5_Risk, fillColor = ~pal_sri3(SRI3_), color = "#444444", weight = 1, smoothFactor = 0.5,
opacity = 0.1, fillOpacity = 0.6,
label = HTML_labels(CUA5_Risk$SRI3_, text = ""),
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
opacity = 0.7,
bringToFront = TRUE),
group = "Grid") %>%
addLegend(title = "Risk",
position = "bottomleft",
values = CUA5_Risk@data$SRI3_,
pal = pal_sri3,
bins = 5,
labFormat = function(type, cuts, p){  # Here's the trick
paste0(sym_labels)}
) %>%
addLayersControl(
baseGroups = c("Street Map", "Satellite Map"),
overlayGroups = c("Fokontany (Max Risk)", "Grid", "Roads"),
position = 'bottomleft',
options = layersControlOptions(collapsed = FALSE)
) %>%
hideGroup("Grid") %>%
hideGroup("Roads")
})
output$updates <- renderUI(HTML("<ul>
<li>04/10/2019 - Added the final texts and toilets individual informations</li>
<li>02/10/2019 - Change the sample toilets for a best adaptation to the new borders</li>
<li> 02/10/2019 - Added a new CUA5 shapefile based on an official source</li>
<li>11/09/2019 - Created the first interactive version</li>
</ul>"))
output$home <- renderUI(HTML("<p>This prototype visualises three versions of geospatial analysis on the same set of 13 indicators to predict the level of risk of uncontained faecal waste in the environment in the 5eme arrondissement in Antananarivo (CUA5). For more information, contact us at hello@gatherhub.org.</p>")
)}
# When ready to deploy, it will then ask if you want to update the original app domain. Click yes.
#it will upload here >> https://sanitationrisk.shinyapps.io/shiny
#library(rsconnect)
#rsconnect::deployApp('C:\\Users\\someg\\dev\\gather\\CUA5---Sanitation-Analysis\\Shiny')
library(shiny)
library(dplyr)
library(leaflet)
library(ggplot2)
library(plotly)
library(lubridate)
library(scales)
library(shinyWidgets)
library(shinythemes)
library(shinyjs)
library(shinycssloaders)
setwd("C:/Users/someg/dev/gather/git/Sanitation_Risk_App/Shiny/Sanitaion_Risk_App/Sanitation_Risk_App/Shiny/")
source('ui_modules.R')
lorem_ipsum <- "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vivamus arcu felis bibendum ut tristique et egestas quis. Et odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Malesuada fames ac turpis egestas integer. Nulla posuere sollicitudin aliquam ultrices sagittis orci a. Libero id faucibus nisl tincidunt eget. Mi bibendum neque egestas congue. Proin sed libero enim sed. Erat imperdiet sed euismod nisi porta lorem. Velit ut tortor pretium viverra suspendisse potenti nullam ac. Mauris vitae ultricies leo integer malesuada nunc vel. Vivamus at augue eget arcu dictum varius duis at. Eleifend mi in nulla posuere sollicitudin aliquam ultrices sagittis orci. Aenean et tortor at risus viverra adipiscing."
# User interface ----
ui <- tagList(
tags$head(tags$script(type="text/javascript", src = "code.js")),
navbarPage(title = "Sanitation Data Platform", id = "nav", theme = "style.css",
tabPanel('Home', value = -1,
fluidRow( class = "updateTitle",
column(4, "Sanitation Data Platform: Geospatial Visualisations for three Sanitation Risk Indices for Antananarivo, Madagascar", div(style = "height:30px;"), offset = 4)
),
fluidRow(class = "updateArea",
column(4, uiOutput(outputId = 'home'), offset = 4)
)),
tabPanel("SRI1", value = 0,
leafletOutput(outputId = "SRI1", height = 700) %>% withSpinner(type = 4),
absolutePanel(id = "waste", class = "panel panel-default", fixed = TRUE,
draggable = F, top =140, left = "auto", right = 50, bottom = "auto",
width = 400, height = 600,
#Stats on the side
h1("Risk"),
br(),
p(id = "mainText", "It considers household density to be of equal importance to all the other indicators combined. This is to account for the additional risk that high household density poses in areas where sanitation facilities are poor (Hathi, et al. 2017)."),
p(id = "mainText", "This index predicts a high level of uncontained faecal waste in the southwest, with another hotspot in the northwest of the study area. The northeast and east are generally predicted to have a low level of risk. This index generates values with few areas that have a significantly higher or lower risk than the others. "))
),
tabPanel("SRI2", value = 1,
leafletOutput(outputId = "SRI2", height = 700) %>% withSpinner(type = 4),
absolutePanel(id = "waste", class = "panel panel-default", fixed = TRUE,
draggable = F, top =140, left = "auto", right = 50, bottom = "auto",
width = 400, height = 600,
#Stats on the side
h1("Risk"),
br(),
p(id = "mainText", "We see a much greater spread in areas that are predicted to have lower rates of uncontained faecal matter in the environment. Areas of high risk are largely located in the northeast and west of the study area, whereas the southeast is predicted to be at lower risk."),
p(id = "mainText", "Similar to SRI1, this index is limited by the assumption that all of the indicators are of equal importance to one another, limiting its accuracy. To improve this, we need to be able to weight each indicator according to its importance. "))
), tabPanel("SRI3", value = 2,
leafletOutput(outputId = "SRI3", height = 700) %>% withSpinner(type = 4),
absolutePanel(id = "waste", class = "panel panel-default", fixed = TRUE,
draggable = F, top =140, left = "auto", right = 50, bottom = "auto",
width = 400, height = 600,
#Stats on the side
h1("Risk"),
br(),
p(id = "mainText", "For SRI3, we utilised the AHP method to develop weights for each indicator according to how important it was in predicting the level of uncontained faecal waste in the environment. It is clear from the weightings that the experts we consulted viewed environmental indicators - flood risk and terrain movement - as the key indicators that predict the level of uncontained faecal waste in the environment."),
p(id = "mainText", "This index shows hotspots in the northeast and northwest, and areas of low risk in the east. It correlates closely to flood risk dataset, as this was the indicator that was most influential by the experts and therefore has the highest weighting. This index gives the most even spread of values across all risk values. "))
),
#this is in the www folder
tabPanel("Appendix", value = 5,
tags$iframe(class = 'leaflet-container', style="height:400px; width:100%; scrolling=yes", src="Datasets_sources.pdf")),
#this is a potential site Updates if people wanted it
#  tabPanel("Site Updates", value = 5,
#           fluidRow( class = "updateTitle",
#             column(4, "Site Updates", div(style = "height:30px;"), offset = 4)
#           ),
#           fluidRow(class = "updateArea",
#             column(4, uiOutput(outputId = 'updates'), offset = 4)
# )),
#
useShinyjs()
))
# When ready to deploy, it will then ask if you want to update the original app domain. Click yes.
#it will upload here >> https://sanitationrisk.shinyapps.io/shiny
library(rsconnect)
getwd()
rsconnect::deployApp('C:\\Users\\someg\\dev\\gather\\git\\Sanitation_Risk_App\\Shiny\\Sanitaion_Risk_App\\Sanitation_Risk_App\\Shiny')
rsconnect::setAccountInfo(name='sanitation-hub', token='82EA28FA57A3CF8359DEAC9326DA0DDE', secret='UXNQCdSIUZB6Wfv7HhhiWf4Nqf+MEJ894mPJWC2s')
rsconnect::deployApp('C:\\Users\\someg\\dev\\gather\\git\\Sanitation_Risk_App\\Shiny\\Sanitaion_Risk_App\\Sanitation_Risk_App\\Shiny')
runApp()
